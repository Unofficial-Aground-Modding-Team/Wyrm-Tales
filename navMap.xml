<?xml version='1.0' encoding='utf-8'?>
<zeta>
    <section if="!exists('NAV_MAP_INCLUDE')">
        <action>
            NAV_MAP_INCLUDED = true;
        </action>
        <action>
            function NAVcreateIcon(id,?anim,?visible){
                if(anim == null) anim = "single";
                if(visible == null) visible = true;
                var ret = Structure.makeRenderer(null,new Xml(0),getTile(id),anim);
                ret.visible = visible;
                return ret;
            }
        </action>
        <data type="navMap">
            function withDefault(xml,id,def){
                return xml.exists(id) ? xml.get(id) : def;
            }
            function createXmlSet(id,value){
                var ret = Xml.createElement("set");
                ret.set("id",id);
                ret.set("value",Std.string(value));
                return ret;
            }
            function cloneXml(xml){
                var ret = Xml.parse(xml.toString());
                return ret.firstElement();
            }
            this.default_star_tile = withDefault(this.xml,"default_star_tile","star");
            this.default_star_anim = withDefault(this.xml,"default_star_anim","single");
            this.default_hover_tile = withDefault(this.xml,"default_hover_tile","nav.star");
            this.default_hover_tile_anim = withDefault(this.xml,"default_hover_tile_anim","nav.star.select");
            this.current_tile = withDefault(this.xml,"current_select_tile","nav.star");
            this.current_anim = withDefault(this.xml,"current_select_animation","nav.star.current");
            this.bg_tile = withDefault(this.xml,"bg_tile","nav.bg.star");
            this.bg_anim = withDefault(this.xml,"bg_anim","single");

            this.bg_x = withDefault(this.xml,"bg_x","0");
            this.bg_y = withDefault(this.xml,"bg_y","0");

            this.window_x = withDefault(this.xml,"window_x","0");
            this.window_y = withDefault(this.xml,"window_y","0");
            this.window_width = withDefault(this.xml,"window_width","256");
            this.window_height = withDefault(this.xml,"window_height","144");

            this.window_close_button = withDefault(this.xml,"window_close_button","false");

            this.default_button_width = withDefault(this.xml,"button_width","16");
            this.default_button_height = withDefault(this.xml,"button_height","16");
            function createStar(data,xml){
                var ret = {};
                ret.id = xml.get("id");
                ret.xml = xml;
                ret.x = xml.get("x");
                ret.y = xml.get("y");
                ret.tile = withDefault(xml,"tile",data.default_star_tile);
                ret.anim = withDefault(xml,"animation",data.default_star_anim);
                ret.hover_tile = withDefault(xml,"hover_tile",data.default_hover_tile);
                ret.hover_anim = withDefault(xml,"hover_animation",data.default_hover_tile_anim);
                ret.title = xml.get("title");
                ret.desc = xml.get("desc");
                var r = Xml.createElement("section");
                r.addChild(createXmlSet("id","'" + Std.string(ret.id) + "'"));
                r.addChild(createXmlSet("data_id","'" + Std.string(data.id) + "'"));
                for(x in xml.elementsNamed("onSelect")){
                    for(y in x.elements()){
                        r.addChild(cloneXml(y));
                    }
                }
                //After the star's onSelect so that stuff in the star's onSelect can stop the default action
                //Unfortunately `stop` does not seem to work so ....
                //TODO : get `&lt;stop/>` to work, if possible.
                for(x in data.xml.elementsNamed("onDefaultSelect")){
                    for(y in x.elements()){
                        r.addChild(cloneXml(y));
                    }
                }
                ret.onSelect = r;
                ret.if = xml.exists("if") ? xml.get("if") : "true";
                return ret;
            }
            this.stars = [];
            for(x in this.xml.elementsNamed("star")) this.stars.push(createStar(this,x));
            this.getStar = function(id){
                for(x in this.stars) if(x.id == id) return x;
                return null;
            }
            this.title_text = this.xml.elementsNamed("titleText").next(); //assumes that the user added it
            this.description_text = this.xml.elementsNamed("descriptionText").next(); //assumes that the user added it
            var it = this.xml.elementsNamed("injectXml");
            this.injectXml = if(it.hasNext()) [for(x in it.next().elements()) cloneXml(x)] else [];
        </data>
        <navMap id="test">
            <star id="test" x="20" y="20" title="system>start" desc="system.desc>start"/>
            <titleText x="115" y="10" width="49" height="8" color="ffffff" align="center"/>
            <descriptionText x="110" y="20" width="86" color="ffffff" align="center"/>
        </navMap>
        <procedure id="showNavMap">
            <action>
                function createXmlSprite(id,anim,?offx,?offy){
                    if(offx == null) offx = 0;
                    if(offy == null) offy = 0;
                    var xml = Xml.createElement("sprite");
                    xml.set("value","NAVcreateIcon('"+ Std.string(id) +"','" + Std.string(anim) +"')");
                    xml.set("x",Std.string(offx)); xml.set("y",Std.string(offy));
                    return xml;
                }
                function createXmlFormattedText(x,y,width,height,color,align){
                    var xml = Xml.createElement("formattedText");
                    xml.set("text","");
                    xml.set("x",Std.string(x));
                    xml.set("y",Std.string(y));
                    if(height != null) xml.set("height",Std.string(height));
                    if(width != null) xml.set("width",Std.string(width));
                    xml.set("align",align);
                    xml.set("color",color);
                    return xml;
                }
                function createIcon(id,?anim){
                    if(anim == null) anim = "single";
                    return Structure.makeRenderer(null,new Xml(0),getTile(id),anim);
                }
                data = getData("navMap",navMap_data.id);
                var win = Xml.createElement("window");
                win.set("type","xml");
                win.set("animate","false");
                win.set("x",data.window_x);
                win.set("y",data.window_y);
                win.set("width",data.window_width);
                win.set("height",data.window_height);
                win.set("closeable","true");
                win.set("closeButton",data.window_close_button);
                for(x in data.injectXml){
                    win.addChild(x);
                }
                var bg_tile = Xml.createElement("tile");
                bg_tile.set("id",data.bg_tile);
                bg_tile.set("animation",data.bg_anim);
                bg_tile.set("x",data.bg_x);
                bg_tile.set("y",data.bg_y);
                win.addChild(bg_tile);
                for(s in data.stars){
                    try{
                    if(eval(s.if) != true) continue;
                    var button = Xml.createElement("button");
                    // assumes the user passes a valid tile, and if a tile without bounds such as `empty` is passed, get the width from xml
                    var button_width = /*getTile(s.tile).getInnerBounds() == null ? getTile(s.tile).getInnerBounds().width :*/ (s.xml.exists("width") ? s.xml.get("width") : data.default_button_width);
                    var button_height = /*getTile(s.tile).getInnerBounds() == null ? getTile(s.tile).getInnerBounds().height :*/ (s.xml.exists("height") ? s.xml.get("height") : data.default_button_height);
                    
                    button.set("x",s.x - (button_width / 2));
                    button.set("y",s.y - (button_height / 2));
                    trace(button_width,button_height);
                    button.set("width",button_width);
                    button.set("height",button_height);
                    button.set("hideHover","true");
                    function getTileOffX(tile){
                        //log(tile);
                        //return button_width / 2;
                        return (getTile(s.tile).getInnerBounds() == null ? 0 : getTile(s.tile).getInnerBounds().width) / 2;
                    }
                    function getTileOffY(tile){
                        //log(tile);
                        //return button_width / 2;
                        return (getTile(s.tile).getInnerBounds() == null ? 0 : getTile(s.tile).getInnerBounds().height) / 2;
                    }
                    button.addChild(createXmlSprite(s.tile,s.anim/*,getTileOffX(s.tile),getTileOffY(s.tile)*/));
                    button.addChild(createXmlSprite(s.hover_tile,s.hover_anim,getTileOffX(s.hover_tile),getTileOffY(s.hover_tile)));
                    if(s.id == navMap_data.current)
                        button.addChild(createXmlSprite(data.current_tile,data.current_anim,getTileOffX(data.current_tile),getTileOffY(data.current_tile)));
                    var select_xml = Xml.createElement("onSelect");
                    select_xml.addChild(s.onSelect);
                    button.addChild(select_xml);
                    var hover_xml = Xml.createElement("onHover");
                    var hover_action = Xml.createElement("action");
                    var action_string = "try{";
                    action_string += ("window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 4 : 3) + ").scaleX = window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 3 : 2) +").scaleX = 0.5;\n"); // hack to make the text small
                    action_string += ("window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 4 : 3) + ").scaleY = window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 3 : 2) +").scaleY = 0.5;\n"); // hack to make the text small
                    action_string += ("window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 4 : 3) + ").setText(hover ? (getText('" + s.title + "') == null ? '' : getText('" + s.title + "').get()) : '');\n");
                    action_string += ("window.getChildAt(window.get_numChildren() - " + Std.string(data.window_close_button == "true" ? 3 : 2) +").setText(hover ? (getText('" + s.desc + "') == null ? '' : getText('" + s.desc + "').get()) : '');\n");
                    action_string += ("button.getChildAt(1).visible = hover;\n");
                    action_string += ("}catch(e:Dynamic){log(e);}");
                    hover_action.addChild(Xml.createPCData(action_string));
                    hover_xml.addChild(hover_action);
                    button.addChild(hover_xml);
                    win.addChild(button);
                    }catch(e:Dynamic){
                        log(e);
                    }
                }
                win.addChild(createXmlFormattedText(data.title_text.get("x"),data.title_text.get("y"),data.title_text.get("width"),data.title_text.get("height"),data.title_text.get("color"),data.title_text.get("align")));
                win.addChild(createXmlFormattedText(data.description_text.get("x"),data.description_text.get("y"),data.description_text.get("width"),data.description_text.get("height"),data.description_text.get("color"),data.description_text.get("align")));
                evalXml(win.toString());
            </action>
        </procedure>

        <!-- <action>navMap_data = {
        id: "test",
        current: "start"
    };</action><run procedure="showNavMap"/> -->
    </section>
</zeta>